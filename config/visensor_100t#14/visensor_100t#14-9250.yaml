%YAML:1.0

#common parameters
imu_topic: "/imu0"
image_topic: "/cam0/image_raw"
output_path: "/config/visensor_100t#14/vins_result.csv"         # vins outputs will be wrttento vins_folder_path + output_path

# MEI is better than PINHOLE for large FOV camera
model_type: MEI
camera_name: camera
image_width: 640
image_height: 480
mirror_parameters:
   xi: 2.565287073617281
distortion_parameters:
   k1: 0.09718618775666099
   k2: 4.163934494012174
   p1: -0.001372600835801248
   p2: -0.00043538570705742676
projection_parameters:
   gamma1: 1006.7667023310498
   gamma2: 1009.3493887228391
   u0: 316.70461111184534
   v0: 235.55818900711836

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning. 
ex_calib_result_path: "/config/euroc/ex_calib_result.yaml"  # If you choose 1 or 2, the extrinsic calibration result will be written vins_folder_path + ex_calib_result_path.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.9999736770831334, 0.0020701789524292737, -0.006954099506303797,
          -0.002160303410631782, 0.9999134551777595, -0.012977489882487396,
           0.006926631938588087, 0.012992171241981413, 0.999891606753656]


#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ 0.01954980543422245, 0.0000704540377045, 0.0021011146931759917]

extrinsicRotation_1: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.9999035189680955, 0.001795074396247725, -0.013774268152318222,
          -0.002026258616803081, 0.999857014811178, -0.016788216370368796,
           0.013742162538620458, 0.016814506855463335, 0.9997641848595948 ]

extrinsicTranslation_1: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.055355491915188876, 0.0002924428599058506, 0.0016905658979605542 ]

stereoRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.9999937376404091, -0.00026539258488127593, -0.0035290574856257782,
          0.0002588685222140577, 0.9999982570946933, -0.0018489982856398398,
          0.003529542045247232, 0.001848073144651583, 0.9999920634478051 ]
#Translation from camera frame to imu frame, imu^T_cam
stereoTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ -0.07480350977811673, 0.0003216683110021111, -0.0005091817629381968 ]


#feature traker paprameters

max_cnt: 150            # max feature number in feature tracking
min_dist: 25            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 1              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
gpu: 0                  # cuda accelerate feature tracker
blur: 0                 # image bilateralFilter
#optimization parameters

max_solver_time: 0.05  # max solver itration time (ms), to guarantee real time
max_num_iterations: 20   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.037          # accelerometer measurement noise standard deviation. 250µg/√Hz  0.00294m/s^2
gyr_n: 0.0013         # gyroscope measurement noise standard deviation. 0.01º/s/√Hz,0.00017452 rad/s
acc_w: 0.002       # accelerometer bias random work noise standard deviation. 0.0014 m/s^2
gyr_w: 0.00006       # gyroscope bias random work noise standard deviation. 6e-5 rad/s
#g_norm: 9.8       #

#acc_n: 0.2          # accelerometer measurement noise standard deviation. 250µg/√Hz  0.00294m/s^2
#gyr_n: 0.02         # gyroscope measurement noise standard deviation. 0.01º/s/√Hz,0.00017452 rad/s
#acc_w: 0.0002        # accelerometer bias random work noise standard deviation. 0.0014 m/s^2
#gyr_w: 2e-4       # gyroscope bias random work noise standard deviation. 1.5e-5 rad/s
g_norm: 9.8       #


#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/sst/catkin_vinsstereo/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                     # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 1        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
